using System;

public struct Vector3D
{
    public double X, Y, Z;

    public Vector3D(double x, double y, double z)
    {
        X = x; Y = y; Z = z;
    }

    public static Vector3D operator *(Vector3D v, double scalar) =>
        new Vector3D(v.X * scalar, v.Y * scalar, v.Z * scalar);

    public static Vector3D operator +(Vector3D v1, Vector3D v2) =>
        new Vector3D(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z);

    public static Vector3D operator -(Vector3D v1, Vector3D v2) =>
        new Vector3D(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z);

    public override string ToString() =>
        $"({X}, {Y}, {Z})";
}
using System;

public struct DecimalNumber
{
    public int Value;

    public DecimalNumber(int value)
    {
        Value = value;
    }

    public string ToBinary() => Convert.ToString(Value, 2);

    public string ToOctal() => Convert.ToString(Value, 8);

    public string ToHex() => Convert.ToString(Value, 16).ToUpper();

    public override string ToString() => Value.ToString();
}
using System;

public struct RgbColor
{
    public byte R, G, B;

    public RgbColor(byte r, byte g, byte b)
    {
        R = r; G = g; B = b;
    }

    public string ToHex() =>
        $"#{R:X2}{G:X2}{B:X2}";

    public (double H, double S, double L) ToHSL()
    {
        double r = R / 255.0, g = G / 255.0, b = B / 255.0;
        double max = Math.Max(r, Math.Max(g, b)), min = Math.Min(r, Math.Min(g, b));
        double h = 0, s, l = (max + min) / 2;

        if (max == min)
        {
            h = s = 0;
        }
        else
        {
            double d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

            if (max == r) h = (g - b) / d + (g < b ? 6 : 0);
            else if (max == g) h = (b - r) / d + 2;
            else h = (r - g) / d + 4;

            h *= 60;
        }

        return (Math.Round(h, 2), Math.Round(s * 100, 2), Math.Round(l * 100, 2));
    }

    public (double C, double M, double Y, double K) ToCMYK()
    {
        double r = R / 255.0, g = G / 255.0, b = B / 255.0;

        double k = 1 - Math.Max(r, Math.Max(g, b));
        if (k == 1)
        {
            return (0, 0, 0, 1);
        }

        double c = (1 - r - k) / (1 - k);
        double m = (1 - g - k) / (1 - k);
        double y = (1 - b - k) / (1 - k);

        return (Math.Round(c, 2), Math.Round(m, 2), Math.Round(y, 2), Math.Round(k, 2));
    }

    public override string ToString() => $"RGB({R}, {G}, {B})";
}
